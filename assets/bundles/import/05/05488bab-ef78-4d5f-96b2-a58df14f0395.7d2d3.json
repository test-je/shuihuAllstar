[1,0,0,[["cc.EffectAsset",["_name","combinations","shaders","techniques"],-1]],[[0,0,1,2,3,5]],[[0,"../bundles/effects/brightness",[{"USE_TEXTURE":[true]},{},{}],[{"hash":1273141093,"name":"../bundles/effects/brightness|vs:vert|fs-2:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["COS_3D_OBJ"]},{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"CTRL_PARAMS_BRIGHTNESS_CONTRAST","stageFlags":16,"binding":2,"members":[{"name":"b2c_brightness","type":13,"count":1},{"name":"b2c_contrast","type":13,"count":1}],"defines":["EFF_BRIGHTNESS_CONTRAST"]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["COS_3D_OBJ"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["COS_3D_OBJ","USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["COS_3D_OBJ","USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["COS_3D_OBJ","USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["COS_3D_OBJ","USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["COS_3D_OBJ","!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","format":44,"location":13,"defines":[]}],"varyings":[{"name":"color","type":16,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"uv0","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_fog_factor","type":13,"count":1,"stageFlags":16,"location":2,"defines":["!CC_USE_ACCURATE_FOG"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n  #else\n  #endif\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n  #endif\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n    #else\n    #endif\n  #else\n  #endif\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if COS_3D_OBJ\n    #if USE_INSTANCING\n        layout(location = 8) in vec4 a_matWorld0;\n        layout(location = 9) in vec4 a_matWorld1;\n        layout(location = 10) in vec4 a_matWorld2;\n        #if USE_LIGHTMAP\n            layout(location = 11) in vec4 a_lightingMapUVParam;\n        #endif\n    #elif USE_BATCHING\n        layout(location = 12) in float a_dyn_batch_id;\n        layout(set = 2, binding = 0) uniform CCLocalBatched {\n            highp mat4 cc_matWorlds[10];\n        };\n    #else\n        layout(set = 2, binding = 0) uniform CCLocal {\n          highp mat4 cc_matWorld;\n          highp mat4 cc_matWorldIT;\n          highp vec4 cc_lightingMapUVParam;\n        };\n    #endif\n    #endif\nlayout(location = 13) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\n#if COS_3D_OBJ\n    layout(set = 1, binding = 0) uniform TexCoords {\n        vec4 tilingOffset;\n    };\n#endif\nvec4 vert () {\n    vec4 position = vec4(a_position, 1);\n    #if COS_3D_OBJ\n        mat4 matWorld;\n            #if USE_INSTANCING\n                matWorld = mat4(\n                vec4(a_matWorld0.xyz, 0.0),\n                vec4(a_matWorld1.xyz, 0.0),\n                vec4(a_matWorld2.xyz, 0.0),\n                vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n                );\n            #elif USE_BATCHING\n                matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n            #else\n                matWorld = cc_matWorld;\n            #endif\n        uv0 = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n        position = cc_matProj * (cc_matView * matWorld) * position;\n    #endif\n    #if COS_2D_SPRITE\n        #if USE_PIXEL_ALIGNMENT\n            position = cc_matView * position;\n            position.xyz = floor(position.xyz);\n            position = cc_matProj * position;\n        #else\n            position = cc_matViewProj * position;\n        #endif\n        uv0 = a_texCoord;\n    #endif\n    color = a_color;\n    return position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 2) in float v_fog_factor;\n#endif\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 1) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nlayout(location = 0) in vec4 color;\nlayout(location = 1) in vec2 uv0;\n#if USE_ALPHA_TEST\n#endif\n#if COS_3D_OBJ\n    layout(set = 1, binding = 3) uniform sampler2D mainTexture;\n#endif\n#if COS_2D_SPRITE\n    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;\n#endif\n#if EFF_BRIGHTNESS_CONTRAST\n    layout(set = 1, binding = 2) uniform CTRL_PARAMS_BRIGHTNESS_CONTRAST {\n        float b2c_brightness;\n        float b2c_contrast;\n    };\n    vec4 effectBrightnessContrast() {\n        vec4 o = vec4(1, 1, 1, 1);\n        #if COS_3D_OBJ\n            o *= texture( mainTexture, uv0 );\n        #endif\n        #if COS_2D_SPRITE\n            o *= texture( cc_spriteTexture, uv0 );\n        #endif\n        o.rgb += b2c_brightness;\n        if (b2c_contrast > 0.0) {\n            o.rgb = (o.rgb - 0.5) / (1.0 - b2c_contrast) + 0.5;\n        } else {\n            o.rgb = (o.rgb - 0.5) * (1.0 + b2c_contrast) + 0.5;\n        }\n        return o;\n    }\n#endif\nvec4 SpriteDefualt() {\n    vec4 o = vec4(1, 1, 1, 1);\n    #if COS_3D_OBJ\n        vec2 p = uv0;\n        #if EFF_NONE\n            o *= texture(mainTexture, p);\n        #endif\n    #endif\n    #if COS_2D_SPRITE\n        #if EFF_NONE\n            o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n        #endif\n        #if IS_GRAY\n            float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n            o.r = o.g = o.b = gray;\n        #endif\n        o *= color;\n        #if USE_ALPHA_TEST\n            if (o.a < alphaThreshold) discard;\n        #endif\n    #endif\n    return o;\n}\nvec4 frag () {\n    vec4 o = vec4(1, 1, 1, 1);\n    o *= SpriteDefualt();\n    #if EFF_NONE\n        return o;\n    #endif\n    #if EFF_BRIGHTNESS_CONTRAST\n        o *= effectBrightnessContrast();\n    #endif\n    return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n  #else\n  #endif\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n    #else\n    #endif\n  #else\n  #endif\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if COS_3D_OBJ\n    #if USE_INSTANCING\n        in vec4 a_matWorld0;\n        in vec4 a_matWorld1;\n        in vec4 a_matWorld2;\n        #if USE_LIGHTMAP\n            in vec4 a_lightingMapUVParam;\n        #endif\n    #elif USE_BATCHING\n        in float a_dyn_batch_id;\n        layout(std140) uniform CCLocalBatched {\n            highp mat4 cc_matWorlds[10];\n        };\n    #else\n        layout(std140) uniform CCLocal {\n          highp mat4 cc_matWorld;\n          highp mat4 cc_matWorldIT;\n          highp vec4 cc_lightingMapUVParam;\n        };\n    #endif\n    #endif\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\n#if COS_3D_OBJ\n    layout(std140) uniform TexCoords {\n        vec4 tilingOffset;\n    };\n#endif\nvec4 vert () {\n    vec4 position = vec4(a_position, 1);\n    #if COS_3D_OBJ\n        mat4 matWorld;\n            #if USE_INSTANCING\n                matWorld = mat4(\n                vec4(a_matWorld0.xyz, 0.0),\n                vec4(a_matWorld1.xyz, 0.0),\n                vec4(a_matWorld2.xyz, 0.0),\n                vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n                );\n            #elif USE_BATCHING\n                matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n            #else\n                matWorld = cc_matWorld;\n            #endif\n        uv0 = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n        position = cc_matProj * (cc_matView * matWorld) * position;\n    #endif\n    #if COS_2D_SPRITE\n        #if USE_PIXEL_ALIGNMENT\n            position = cc_matView * position;\n            position.xyz = floor(position.xyz);\n            position = cc_matProj * position;\n        #else\n            position = cc_matViewProj * position;\n        #endif\n        uv0 = a_texCoord;\n    #endif\n    color = a_color;\n    return position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nin vec4 color;\nin vec2 uv0;\n#if USE_ALPHA_TEST\n#endif\n#if COS_3D_OBJ\n    uniform sampler2D mainTexture;\n#endif\n#if COS_2D_SPRITE\n    uniform sampler2D cc_spriteTexture;\n#endif\n#if EFF_BRIGHTNESS_CONTRAST\n    layout(std140) uniform CTRL_PARAMS_BRIGHTNESS_CONTRAST {\n        float b2c_brightness;\n        float b2c_contrast;\n    };\n    vec4 effectBrightnessContrast() {\n        vec4 o = vec4(1, 1, 1, 1);\n        #if COS_3D_OBJ\n            o *= texture( mainTexture, uv0 );\n        #endif\n        #if COS_2D_SPRITE\n            o *= texture( cc_spriteTexture, uv0 );\n        #endif\n        o.rgb += b2c_brightness;\n        if (b2c_contrast > 0.0) {\n            o.rgb = (o.rgb - 0.5) / (1.0 - b2c_contrast) + 0.5;\n        } else {\n            o.rgb = (o.rgb - 0.5) * (1.0 + b2c_contrast) + 0.5;\n        }\n        return o;\n    }\n#endif\nvec4 SpriteDefualt() {\n    vec4 o = vec4(1, 1, 1, 1);\n    #if COS_3D_OBJ\n        vec2 p = uv0;\n        #if EFF_NONE\n            o *= texture(mainTexture, p);\n        #endif\n    #endif\n    #if COS_2D_SPRITE\n        #if EFF_NONE\n            o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n        #endif\n        #if IS_GRAY\n            float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n            o.r = o.g = o.b = gray;\n        #endif\n        o *= color;\n        #if USE_ALPHA_TEST\n            if (o.a < alphaThreshold) discard;\n        #endif\n    #endif\n    return o;\n}\nvec4 frag () {\n    vec4 o = vec4(1, 1, 1, 1);\n    o *= SpriteDefualt();\n    #if EFF_NONE\n        return o;\n    #endif\n    #if EFF_BRIGHTNESS_CONTRAST\n        o *= effectBrightnessContrast();\n    #endif\n    return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n  #else\n  #endif\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n    #else\n    #endif\n  #else\n  #endif\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n#if COS_3D_OBJ\n    #if USE_INSTANCING\n        attribute vec4 a_matWorld0;\n        attribute vec4 a_matWorld1;\n        attribute vec4 a_matWorld2;\n        #if USE_LIGHTMAP\n            attribute vec4 a_lightingMapUVParam;\n        #endif\n    #elif USE_BATCHING\n        attribute float a_dyn_batch_id;\n        uniform highp mat4 cc_matWorlds[10];\n    #else\n        uniform highp mat4 cc_matWorld;\n    #endif\n    #endif\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\n#if COS_3D_OBJ\n          uniform vec4 tilingOffset;\n#endif\nvec4 vert () {\n    vec4 position = vec4(a_position, 1);\n    #if COS_3D_OBJ\n        mat4 matWorld;\n            #if USE_INSTANCING\n                matWorld = mat4(\n                vec4(a_matWorld0.xyz, 0.0),\n                vec4(a_matWorld1.xyz, 0.0),\n                vec4(a_matWorld2.xyz, 0.0),\n                vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n                );\n            #elif USE_BATCHING\n                matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n            #else\n                matWorld = cc_matWorld;\n            #endif\n        uv0 = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n        position = cc_matProj * (cc_matView * matWorld) * position;\n    #endif\n    #if COS_2D_SPRITE\n        #if USE_PIXEL_ALIGNMENT\n            position = cc_matView * position;\n            position.xyz = floor(position.xyz);\n            position = cc_matProj * position;\n        #else\n            position = cc_matViewProj * position;\n        #endif\n        uv0 = a_texCoord;\n    #endif\n    color = a_color;\n    return position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvarying vec4 color;\nvarying vec2 uv0;\n#if USE_ALPHA_TEST\n#endif\n#if COS_3D_OBJ\n    uniform sampler2D mainTexture;\n#endif\n#if COS_2D_SPRITE\n    uniform sampler2D cc_spriteTexture;\n#endif\n#if EFF_BRIGHTNESS_CONTRAST\n          uniform float b2c_brightness;\n      uniform float b2c_contrast;\n    vec4 effectBrightnessContrast() {\n        vec4 o = vec4(1, 1, 1, 1);\n        #if COS_3D_OBJ\n            o *= texture2D(mainTexture, uv0 );\n        #endif\n        #if COS_2D_SPRITE\n            o *= texture2D(cc_spriteTexture, uv0 );\n        #endif\n        o.rgb += b2c_brightness;\n        if (b2c_contrast > 0.0) {\n            o.rgb = (o.rgb - 0.5) / (1.0 - b2c_contrast) + 0.5;\n        } else {\n            o.rgb = (o.rgb - 0.5) * (1.0 + b2c_contrast) + 0.5;\n        }\n        return o;\n    }\n#endif\nvec4 SpriteDefualt() {\n    vec4 o = vec4(1, 1, 1, 1);\n    #if COS_3D_OBJ\n        vec2 p = uv0;\n        #if EFF_NONE\n            o *= texture2D(mainTexture, p);\n        #endif\n    #endif\n    #if COS_2D_SPRITE\n        #if EFF_NONE\n            o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n        #endif\n        #if IS_GRAY\n            float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n            o.r = o.g = o.b = gray;\n        #endif\n        o *= color;\n        #if USE_ALPHA_TEST\n            if (o.a < alphaThreshold) discard;\n        #endif\n    #endif\n    return o;\n}\nvec4 frag () {\n    vec4 o = vec4(1, 1, 1, 1);\n    o *= SpriteDefualt();\n    #if EFF_NONE\n        return o;\n    #endif\n    #if EFF_BRIGHTNESS_CONTRAST\n        o *= effectBrightnessContrast();\n    #endif\n    return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["COS_3D_OBJ","!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["COS_3D_OBJ","!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_spriteTexture","defines":["COS_2D_SPRITE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":197,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":42}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":["COS_3D_OBJ"],"editor":{"elevated":true}},{"name":"COS_3D_OBJ","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["COS_3D_OBJ","!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["COS_3D_OBJ","USE_INSTANCING"]},{"name":"COS_2D_SPRITE","type":"boolean","defines":[]},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean","defines":["COS_2D_SPRITE"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"EFF_BRIGHTNESS_CONTRAST","type":"boolean","defines":[]},{"name":"EFF_NONE","type":"boolean","defines":[]},{"name":"IS_GRAY","type":"boolean","defines":["COS_2D_SPRITE"]}]}],[{"passes":[{"program":"../bundles/effects/brightness|vs:vert|fs-2:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"b2c_brightness":{"type":13,"value":[0.1]},"b2c_contrast":{"type":13,"value":[-0.03]}}}]}]]],0,0,[],[],[]]
